# Define the minimum iOS deployment target
platform :ios, '13.0'

# Enable frameworks and modular headers for Swift and Obj-C interop
use_frameworks!
use_modular_headers!

# Disable CocoaPods analytics to speed up Flutter builds
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Map all custom configurations to CocoaPods build types
project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
  'Debug-MCP Dev' => :debug,
  'Debug-MCP Staging' => :debug,
  'Debug-MCP Prod' => :debug,
  'Release-MCP Dev' => :release,
  'Release-MCP Staging' => :release,
  'Release-MCP Prod' => :release,
}

# --- Flutter Environment Setup ---
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. Run `flutter pub get` first."
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}."
end

require File.expand_path(File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper.rb'))

flutter_ios_podfile_setup

# --- Main Target ---
target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# --- Post Install Hooks ---
post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)

    # Ensure all targets have proper build settings
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
    end
  end
end
